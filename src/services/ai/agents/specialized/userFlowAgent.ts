/**
 * User Flow Agent - Modulare e ottimizzato
 * Definisce il flusso utente principale dell'applicazione
 */

import { apiClient } from '../../core/apiClient';
import type { AgentExecutionContext } from '../../types';

/**
 * Interfaccia per l'agente User Flow
 */
export interface IUserFlowAgent {
  execute(context: AgentExecutionContext): Promise<string>;
  validateInput(context: AgentExecutionContext): boolean;
}

/**
 * Implementazione del User Flow Agent
 */
export class UserFlowAgent implements IUserFlowAgent {
  private model = 'gemini-2.5-flash';

  /**
   * Esegue la generazione del user flow
   */
  async execute(context: AgentExecutionContext): Promise<string> {
    // Valida l'input
    if (!this.validateInput(context)) {
      throw new Error('Invalid execution context for UserFlowAgent');
    }

    try {
      // Schema per la validazione
      const schema = {
        type: 'object' as const,
        properties: {
          title: { type: 'string' as const },
          description: { type: 'string' as const },
          steps: {
            type: 'array' as const,
            items: {
              type: 'object' as const,
              properties: {
                step: { type: 'number' as const },
                action: { type: 'string' as const },
                description: { type: 'string' as const }
              },
              required: ['step', 'action', 'description'] as const
            }
          }
        },
        required: ['title', 'description', 'steps'] as const
      };

      // Costruisce il prompt
      const prompt = this.buildPrompt(context);

      // Esegue la chiamata API
      const response = await apiClient.execute<string>({
        model: this.model,
        prompt,
        options: {
          expectJson: true,
          schema,
          temperature: 0.7
        }
      });

      if (!response.success || !response.data) {
        throw new Error(response.error || 'Failed to generate user flow');
      }

      // Converte il JSON in markdown
      return this.formatAsMarkdown(JSON.parse(response.data));

    } catch (error) {
      console.error('UserFlowAgent execution failed:', error);
      throw new Error(`User flow generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Valida che il context sia appropriato per questo agente
   */
  validateInput(context: AgentExecutionContext): boolean {
    return !!(
      context.planContext?.userIdea &&
      context.planContext?.techStack &&
      context.task?.goal &&
      context.task?.focus
    );
  }

  /**
   * Costruisce il prompt per l'agente
   */
  private buildPrompt(context: AgentExecutionContext): string {
    const planContextString = JSON.stringify(context.planContext, null, 2);

    return `You are a UX Designer. Your task is to outline a primary user flow for this project.
Analyze the project context and describe the key user journey from start to finish.

**Project Context:**
${planContextString}

**Your Goal:** ${context.task.goal}
**Your Focus:** ${context.task.focus}

**Instructions:**
1. Create a clear, step-by-step user flow based on the core features
2. Focus on the primary user journey (e.g., from landing to completing main action)
3. Each step should include:
   - Step number
   - User action
   - Brief description of what happens
4. Output as JSON with the following structure:
{
  "title": "Flow Title",
  "description": "Brief description of the flow",
  "steps": [
    {
      "step": 1,
      "action": "User lands on homepage",
      "description": "User sees the main landing page with value proposition"
    }
  ]
}

Generate the user flow now.`;
  }

  /**
   * Converte il risultato JSON in formato markdown
   */
  private formatAsMarkdown(data: any): string {
    let markdown = `# ${data.title}\n\n`;
    markdown += `${data.description}\n\n`;

    markdown += `## User Flow Steps\n\n`;

    data.steps.forEach((step: any) => {
      markdown += `### Step ${step.step}: ${step.action}\n`;
      markdown += `${step.description}\n\n`;
    });

    markdown += `---\n\n`;
    markdown += `*Generated by UserFlowAgent*\n`;

    return markdown;
  }
}

/**
 * Factory per creare l'agente User Flow
 */
export const createUserFlowAgent = (): IUserFlowAgent => {
  return new UserFlowAgent();
};

// Istanza singleton
export const userFlowAgent = createUserFlowAgent();