/**
 * User Persona Agent - Modulare e ottimizzato
 * Crea personas utente per guidare design e sviluppo
 */

import { apiClient } from '../../core/apiClient';
import type { AgentExecutionContext } from '../../types';

/**
 * Interfaccia per l'agente User Persona
 */
export interface IUserPersonaAgent {
  execute(context: AgentExecutionContext): Promise<string>;
  validateInput(context: AgentExecutionContext): boolean;
}

/**
 * Implementazione del User Persona Agent
 */
export class UserPersonaAgent implements IUserPersonaAgent {
  private model = 'gemini-2.5-flash';

  /**
   * Esegue la generazione delle user personas
   */
  async execute(context: AgentExecutionContext): Promise<string> {
    // Valida l'input
    if (!this.validateInput(context)) {
      throw new Error('Invalid execution context for UserPersonaAgent');
    }

    try {
      // Schema per la validazione
      const schema = {
        type: 'object' as const,
        properties: {
          personas: {
            type: 'array' as const,
            items: {
              type: 'object' as const,
              properties: {
                name: { type: 'string' as const },
                bio: { type: 'string' as const },
                goals: { type: 'array' as const, items: { type: 'string' as const } },
                frustrations: { type: 'array' as const, items: { type: 'string' as const } }
              },
              required: ['name', 'bio', 'goals', 'frustrations'] as const
            }
          }
        },
        required: ['personas'] as const
      };

      // Costruisce il prompt
      const prompt = this.buildPrompt(context);

      // Esegue la chiamata API
      const response = await apiClient.execute<string>({
        model: this.model,
        prompt,
        options: {
          expectJson: true,
          schema,
          temperature: 0.8 // PiÃ¹ creativa per personas
        }
      });

      if (!response.success || !response.data) {
        throw new Error(response.error || 'Failed to generate user personas');
      }

      // Converte il JSON in markdown
      return this.formatAsMarkdown(JSON.parse(response.data));

    } catch (error) {
      console.error('UserPersonaAgent execution failed:', error);
      throw new Error(`User persona generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }

  /**
   * Valida che il context sia appropriato per questo agente
   */
  validateInput(context: AgentExecutionContext): boolean {
    return !!(
      context.planContext?.userIdea &&
      context.planContext?.techStack &&
      context.task?.goal &&
      context.task?.focus
    );
  }

  /**
   * Costruisce il prompt per l'agente
   */
  private buildPrompt(context: AgentExecutionContext): string {
    const planContextString = JSON.stringify(context.planContext, null, 2);

    return `You are a UX Researcher. Your task is to create user personas for this project.
Analyze the project context and create 2-3 distinct user personas.

**Project Context:**
${planContextString}

**Your Goal:** ${context.task.goal}
**Your Focus:** ${context.task.focus}

**Instructions:**
1. Create 2-3 realistic user personas based on the project idea
2. Each persona should have:
   - A realistic name and demographic info
   - A brief bio explaining their background
   - Their goals related to this app
   - Their frustrations that this app would solve
3. Output as JSON with the following structure:
{
  "personas": [
    {
      "name": "Persona Name",
      "bio": "Brief background description",
      "goals": ["Goal 1", "Goal 2"],
      "frustrations": ["Frustration 1", "Frustration 2"]
    }
  ]
}

Generate the user personas now.`;
  }

  /**
   * Converte il risultato JSON in formato markdown
   */
  private formatAsMarkdown(data: any): string {
    let markdown = `# User Personas\n\n`;

    data.personas.forEach((persona: any, index: number) => {
      markdown += `## ${persona.name}\n\n`;
      markdown += `**Bio:** ${persona.bio}\n\n`;
      markdown += `**Goals:**\n`;
      persona.goals.forEach((goal: string) => {
        markdown += `- ${goal}\n`;
      });
      markdown += `\n**Frustrations:**\n`;
      persona.frustrations.forEach((frustration: string) => {
        markdown += `- ${frustration}\n`;
      });
      markdown += `\n---\n\n`;
    });

    markdown += `*Generated by UserPersonaAgent*\n`;

    return markdown;
  }
}

/**
 * Factory per creare l'agente User Persona
 */
export const createUserPersonaAgent = (): IUserPersonaAgent => {
  return new UserPersonaAgent();
};

// Istanza singleton
export const userPersonaAgent = createUserPersonaAgent();